{"version":3,"file":"game.js","sourceRoot":"","sources":["game.ts"],"names":[],"mappings":"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","sourcesContent":["import { Elixir, Spell } from \"./game.model\";\nconst Endpoints = {\n  ELIXIRS: \"Elixirs\",\n  SPELLS: \"Spells\",\n} as const;\ntype Endpoint = typeof Endpoints[keyof typeof Endpoints];\n\nlet elixirs: Elixir[] = [];\nlet spells : Spell[] = [];\n\nlet validOption: string | undefined = undefined;\n\nconst gameContainer = document.getElementById(\"game\");\n\nasync function fetchData(endpoint: Endpoint): Promise<Elixir[] | Spell[]> {\n  const response = await fetch(\n    `https://wizard-world-api.herokuapp.com/${endpoint}`\n  );\n  if (!response.ok) {\n    throw new Error(`Error fetching data from ${endpoint}`);\n  }\n\n  const data = await response.json();\n\n  return data;\n}\n\nasync function fetchAllData() {\n  const [elixirsResponse, spellsResponse] = await Promise.all([\n    fetchData(Endpoints.ELIXIRS),\n    fetchData(Endpoints.SPELLS),\n  ]);\n\n  elixirs = (elixirsResponse as Elixir[]).filter((elixir) => elixir.effect);\n  spells = (spellsResponse as Spell[]).filter((spell) => spell.incantation);\n}\n\nfunction getRandomElements<T>(array: T[], count: number) {\n  const indexes: Set<number> = new Set();\n\n  while (indexes.size < count) {\n    const randomIndex:number = Math.floor(Math.random() * array.length);\n    indexes.add(randomIndex);\n  }\n\n  return Array.from(indexes).map((index) => array[index]);\n}\n\nfunction generateOptions<T>(randomElements: T[]) {\n  const [rightOption, ...rest] = randomElements;\n\n  const options = [rightOption, ...rest].sort(() =>\n    Math.random() > 0.5 ? 1 : -1\n  );\n\n  return {\n    rightOption,\n    options,\n  };\n}\n\nfunction elixirGame() {\n  const { options, rightOption } = generateOptions(\n    getRandomElements(elixirs, 3)\n  );\n\n  validOption = rightOption.name;\n\n  console.log(`Cheat Mode: Right answer is ${validOption}`);\n\n  renderOptions(\n    `Which elixir effect is: \"${rightOption.effect}\"?`,\n    options.map((elixir) => elixir.name)\n  );\n}\n\nfunction spellGame() {\n  const { options, rightOption } = generateOptions(\n    getRandomElements(spells, 3)\n  );\n\n  validOption = rightOption.name;\n\n  console.log(`Cheat Mode: Right answer is ${validOption}`);\n\n  renderOptions(\n    `Which spell incantation is: \"${rightOption.incantation}\"?`,\n    options.map((spell) => spell.name)\n  );\n}\n\nfunction renderOptions(question:string, answers: string[]) {\n  const questionElement = document.getElementById(\"question\");\n\n  if (!gameContainer || !questionElement) {\n    throw new Error(\"Game container or question element not found\");\n  }\n\n  gameContainer.innerHTML = \"\";\n\n  questionElement.textContent = question;\n\n  answers.forEach((answer) => {\n    const option = document.createElement(\"button\");\n\n    option.textContent = answer;\n\n    gameContainer.appendChild(option);\n  });\n}\n\ngameContainer!.addEventListener(\"click\", (event) => {\n  const target = event.target as HTMLElement;\n\n  if (target.tagName === \"BUTTON\") {\n    const selectedOption = target!.textContent;\n\n    if (selectedOption === validOption) {\n      round();\n    } else {\n      alert(\"Wrong answer!\");\n    }\n  }\n});\n\nfunction round() {\n  const randomGame = Math.random() > 0.5 ? elixirGame : spellGame;\n\n  randomGame();\n}\n\nasync function startGame() {\n  await fetchAllData();\n\n  round();\n}\n\nstartGame();\n"]}